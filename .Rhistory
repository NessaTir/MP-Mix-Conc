# OUTPUT: A tibble: 1 x 3
# variable                statistic p.value
# <chr>                       <dbl>   <dbl>
#   1 residuals(model_t3_Pve)     0.981   0.206
check_normality(model_t3_Pve)
# OK: residuals appear as normally distributed (p = 0.206).
check_heteroscedasticity(model_t3_Pve)
# OK: Error variance appears to be homoscedastic (p = 0.592).
# get summary of LMER
summary(glht(model_t3_Pve, linfct = mcp(treat = "Tukey")),
test = adjusted("holm"))
# OUTPUT:
# Simultaneous Tests for General Linear Hypotheses
# Multiple Comparisons of Means: Tukey Contrasts
# Fit: lmer(formula = mean^2 ~ treat + (1 | col), data = Pve_sum_t3)
# Linear Hypotheses:
#   Estimate Std. Error z value Pr(>|z|)
#   0.1 - control == 0  0.155969   0.091407   1.706   0.7036
#   1 - control == 0    0.009278   0.091407   0.101   1.0000
#   10 - control == 0  -0.078630   0.091407  -0.860   1.0000
#   100 - control == 0 -0.111018   0.091407  -1.215   1.0000
#   1 - 0.1 == 0       -0.146691   0.091407  -1.605   0.7597
#   10 - 0.1 == 0      -0.234599   0.091407  -2.567   0.0925 .
#   100 - 0.1 == 0     -0.266988   0.091407  -2.921   0.0349 *
#   10 - 1 == 0        -0.087907   0.091407  -0.962   1.0000
#   100 - 1 == 0       -0.120296   0.091407  -1.316   1.0000
#   100 - 10 == 0      -0.032389   0.091407  -0.354   1.0000
# ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# (Adjusted p values reported -- holm method)
## ---- 5.2. Stylophora pistillata ---------------------------------------------
### --- 5.2.1. Overall effect --------------------------------------------------
# create a subset with data of Spi t0 excluded for continuous model
Spi_overall_effect <- subset(Polyps, spec == "Spi" & tp!= "0")
# create a table with mean values
Spi_sum_1 <- Spi_overall_effect %>%
group_by(tp, ID, conc, col) %>%
get_summary_stats(ranks, type = "mean")
# write LMER
model1_Spi <- lmer(scale(mean) ~ conc + (1|col) + (1|tp), data = Spi_sum_1)
# inspect residuals
qqPlot(residuals(model1_Spi))          # good fit
shapiro_test(residuals(model1_Spi))    # p > 0.05 = Normality
# OUTPUT: A tibble: 1 x 3
# variable              statistic p.value
# <chr>                     <dbl>   <dbl>
#   1 residuals(model1_Spi)     0.990  0.0510
check_normality(model1_Spi)
# OK: residuals appear as normally distributed (p = 0.052).
check_heteroscedasticity(model1_Spi)
# OK: Error variance appears to be homoscedastic (p = 0.672).
cftest(model1_Spi)
# OUTPUT:
# Simultaneous Tests for General Linear Hypotheses
# Fit: lmer(formula = scale(mean) ~ conc + (1 | col) + (1 | tp), data = Spi_sum_1)
# Linear Hypotheses:
#   Estimate Std. Error z value Pr(>|z|)
# (Intercept) == 0  0.120578   0.316213   0.381    0.703
# conc == 0        -0.005427   0.001086  -4.995 5.89e-07 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#   (Univariate p values reported)
### --- 5.2.2. Specific effects ------------------------------------------------
# ------------- t0
# create a subset with data of Spi, to test differences at t0
Spi_t0 <- subset(Polyps, spec == "Spi" & tp == "0")
# create a table with mean values
Spi_sum_t0 <- Spi_t0 %>%
group_by(tp, ID, treat, col) %>%
get_summary_stats(ranks, type = "mean")
# write LMER
model_t0_Spi <- lmer(scale(mean) ~ treat + (1|col), data = Spi_sum_t0)
# inspect residuals
qqPlot(residuals(model_t0_Spi))          # good fit
shapiro_test(residuals(model_t0_Spi))    # p > 0.05 = Normality
# OUTPUT: A tibble: 1 x 3
# variable                statistic p.value
# <chr>                       <dbl>   <dbl>
#   1 residuals(model_t0_Spi)     0.992   0.893
check_normality(model_t0_Spi)
# OK: residuals appear as normally distributed (p = 0.893).
check_heteroscedasticity(model_t0_Spi)
# OK: Error variance appears to be homoscedastic (p = 0.639).
# get summary of LMER
summary(glht(model_t0_Spi, linfct = mcp(treat = "Tukey")),
test = adjusted("holm"))
# OUTPUT:
# Simultaneous Tests for General Linear Hypotheses
# Multiple Comparisons of Means: Tukey Contrasts
# Fit: lmer(formula = scale(mean) ~ treat + (1 | col), data = Spi_sum_t0)
# Linear Hypotheses:
#   Estimate Std. Error z value Pr(>|z|)
# 0.1 - control == 0 -0.29955    0.20369  -1.471        1
# 1 - control == 0   -0.03750    0.20369  -0.184        1
# 10 - control == 0  -0.15000    0.20369  -0.736        1
# 100 - control == 0 -0.11205    0.20369  -0.550        1
# 1 - 0.1 == 0        0.26205    0.20369   1.286        1
# 10 - 0.1 == 0       0.14955    0.20369   0.734        1
# 100 - 0.1 == 0      0.18750    0.20369   0.921        1
# 10 - 1 == 0        -0.11250    0.20369  -0.552        1
# 100 - 1 == 0       -0.07455    0.20369  -0.366        1
# 100 - 10 == 0       0.03795    0.20369   0.186        1
# (Adjusted p values reported -- holm method)
# ------------- t1
# create a subset with data of Spi, to test differences at t1
Spi_t1 <- subset(Polyps, spec == "Spi" & tp == "1")
# create a table with mean values
Spi_sum_t1 <- Spi_t1 %>%
group_by(ID, treat, col) %>%
get_summary_stats(ranks, type = "mean")
# write LMER
model_t1_Spi <- lmer(scale(mean) ~ treat + (1|col), data = Spi_sum_t1)
# inspect residuals
qqPlot(residuals(model_t1_Spi))          # good fit
shapiro_test(residuals(model_t1_Spi))    # p > 0.05 = Normality
# OUTPUT: A tibble: 1 x 3
# variable                statistic p.value
# <chr>                       <dbl>   <dbl>
#   1 residuals(model_t1_Spi)     0.981   0.209
check_normality(model_t1_Spi)
# OK: residuals appear as normally distributed (p = 0.209).
check_heteroscedasticity(model_t1_Spi)
# OK: Error variance appears to be homoscedastic (p = 0.994).
# get summary of LMER
summary(glht(model_t1_Spi, linfct = mcp(treat = "Tukey")),
test = adjusted("holm"))
# OUTPUT:
# Simultaneous Tests for General Linear Hypotheses
# Multiple Comparisons of Means: Tukey Contrasts
# Fit: lmer(formula = scale(mean) ~ treat + (1 | col), data = Spi_sum_t1)
# Linear Hypotheses:
#   Estimate Std. Error z value Pr(>|z|)
#   0.1 - control == 0 -0.03628    0.17168  -0.211   0.8326
#   1 - control == 0    0.17965    0.17168   1.046   0.8303
#   10 - control == 0  -0.25264    0.17168  -1.472   0.7056
#   100 - control == 0 -0.79182    0.17168  -4.612 3.58e-05 ***
#   1 - 0.1 == 0        0.21593    0.17168   1.258   0.8303
#   10 - 0.1 == 0      -0.21636    0.17168  -1.260   0.8303
#   100 - 0.1 == 0     -0.75554    0.17168  -4.401 8.62e-05 ***
#   10 - 1 == 0        -0.43229    0.17168  -2.518   0.0708 .
#   100 - 1 == 0       -0.97148    0.17168  -5.659 1.52e-07 ***
#   100 - 10 == 0      -0.53918    0.17168  -3.141   0.0118 *
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# (Adjusted p values reported -- holm method)
# ------------- t2
# create a subset with data of Spi, to test differences at t2
Spi_t2 <- subset(Polyps, spec == "Spi" & tp == "2")
# create a table with mean values
Spi_sum_t2 <- Spi_t2 %>%
group_by(ID, treat, col) %>%
get_summary_stats(ranks, type = "mean")
# write LMER
model_t2_Spi <- lmer(scale(mean) ~ treat + (1|col), data = Spi_sum_t2)
# inspect residuals
qqPlot(residuals(model_t2_Spi))          # good fit
shapiro_test(residuals(model_t2_Spi))    # p > 0.05 = Normality
# OUTPUT: A tibble: 1 x 3
# variable                statistic p.value
# <chr>                       <dbl>   <dbl>
#   1 residuals(model_t2_Spi)     0.989   0.692
check_normality(model_t2_Spi)
# OK: residuals appear as normally distributed (p = 0.692).
check_heteroscedasticity(model_t2_Spi)
# OK: Error variance appears to be homoscedastic (p = 0.680).
# get summary of lmer
summary(glht(model_t2_Spi, linfct = mcp(treat = "Tukey")),
test = adjusted("holm"))
# OUTPUT:
# Simultaneous Tests for General Linear Hypotheses
# Multiple Comparisons of Means: Tukey Contrasts
# Fit: lmer(formula = scale(mean) ~ treat + (1 | col), data = Spi_sum_t2)
# Linear Hypotheses:
#   Estimate Std. Error z value Pr(>|z|)
#   0.1 - control == 0  -0.1005     0.2196  -0.458  0.88945
#   1 - control == 0    -0.6713     0.2196  -3.057  0.01789 *
#   10 - control == 0   -0.4362     0.2196  -1.986  0.28200
#   100 - control == 0  -0.8391     0.2196  -3.821  0.00133 **
#   1 - 0.1 == 0        -0.5708     0.2196  -2.599  0.06542 .
#   10 - 0.1 == 0       -0.3357     0.2196  -1.528  0.50557
#   100 - 0.1 == 0      -0.7386     0.2196  -3.363  0.00693 **
#   10 - 1 == 0          0.2351     0.2196   1.071  0.85295
#   100 - 1 == 0        -0.1678     0.2196  -0.764  0.88945
#   100 - 10 == 0       -0.4029     0.2196  -1.835  0.33259
# ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# (Adjusted p values reported -- holm method)
# ------------- t3
# create a subset with data of Spi, to test differences at t3
Spi_t3 <- subset(Polyps, spec == "Spi" & tp == "3")
# create a table with mean values
Spi_sum_t3 <- Spi_t3 %>%
group_by(ID, treat, col) %>%
get_summary_stats(ranks, type = "mean")
# write LMER
model_t3_Spi <- lmer(mean^2 ~ treat + (1|col), data = Spi_sum_t3)
# inspect residuals
qqPlot(residuals(model_t3_Spi))          # good fit
shapiro_test(residuals(model_t3_Spi))    # p > 0.05 = Normality
# OUTPUT: # A tibble: 1 x 3
# variable                statistic p.value
# <chr>                       <dbl>   <dbl>
#   1 residuals(model_t3_Spi)     0.990   0.728
check_normality(model_t3_Spi)
# OK: residuals appear as normally distributed (p = 0.728).
check_heteroscedasticity(model_t3_Spi)
# OK: Error variance appears to be homoscedastic (p = 0.416).
# get summary of LMER
summary(glht(model_t3_Spi, linfct = mcp(treat = "Tukey")),
test = adjusted("holm"))
# OUTPUT:
# Simultaneous Tests for General Linear Hypotheses
# Multiple Comparisons of Means: Tukey Contrasts
# Fit: lmer(formula = mean^2 ~ treat + (1 | col), data = Spi_sum_t3)
# Linear Hypotheses:
#   Estimate Std. Error z value Pr(>|z|)
# 0.1 - control == 0 -0.057327   0.087021  -0.659    1.000
# 1 - control == 0    0.129426   0.087021   1.487    0.959
# 10 - control == 0  -0.074204   0.087021  -0.853    1.000
# 100 - control == 0 -0.066401   0.087021  -0.763    1.000
# 1 - 0.1 == 0        0.186753   0.087021   2.146    0.255
# 10 - 0.1 == 0      -0.016877   0.087021  -0.194    1.000
# 100 - 0.1 == 0     -0.009074   0.087021  -0.104    1.000
# 10 - 1 == 0        -0.203630   0.087021  -2.340    0.193
# 100 - 1 == 0       -0.195827   0.087021  -2.250    0.220
# 100 - 10 == 0       0.007803   0.087021   0.090    1.000
# (Adjusted p values reported -- holm method)
# ----- 6. Write tables --------------------------------------------------------
## ---- 6.1. Table of polyp activities -----------------------------------------
# for creation of plots for visualization > Script 'Plots'
write_rds(Polyps, "processed/polyp_activity.rds")
## ---- 6.2. Tables of summary -------------------------------------------------
# create a table to summarize the mean polyp activity for P. verrucosa
Pve <- subset(Polyps, spec == "Pve")
Pve_sum <- Pve %>%
group_by(tp, ID, conc, col) %>%
get_summary_stats(ranks, type = "mean")
write_csv2(Pve_sum, "out/polyp_mean_Pve.csv")
# create a table to summarize the mean polyp activity for S. pistillata
Spi <- subset(Polyps, spec == "Spi")
Spi_sum <- Spi %>%
group_by(tp, ID, conc, col) %>%
get_summary_stats(ranks, type = "mean")
write_csv2(Spi_sum, "out/polyp_mean_Spi.csv")
surface_all <-  surface %>%
# separate by species and concentration
group_by(ID, spec, conc) %>%
# add column with parameter
# ignore NAs
na.omit() %>%
# use mean
summarise(value = sum(surface_growth)) %>%
mutate(parameter = "surface",
conc = as.numeric(conc))
volume_all <-  volume %>%
# separate by species and concentration
group_by(ID, spec, conc) %>%
# ignore NAs
na.omit() %>%
# use mean
summarise(value = sum(volume_growth))%>%
mutate(parameter = "volume",
conc = as.numeric(conc))
calcification_all <-  calcification %>%
# separate by species and concentration
group_by(ID, spec, conc) %>%
# ignore NAs
na.omit() %>%
# use mean
summarise(value = sum(weight_growth))%>%
mutate(parameter = "calcification",
conc = as.numeric(conc))
YII_all <-  YII_relative %>%
# select only the last timepoint
filter(tp=="3") %>%
# ignore NAs
na.omit() %>%
#rename column enrty
rename(value = relativeYII) %>%
# use mean
mutate(parameter = "YII")   %>%
#keep only relevant columns
dplyr::select(ID, spec, conc, value, parameter)
FvFm_all <-  FvFm_relative %>%
# select only the last timepoint
filter(tp=="3") %>%
# ignore NAs
na.omit() %>%
#rename column enrty
rename(value = relativeFvFm) %>%
# use mean
mutate(parameter = "FvFm")   %>%
#keep only relevant columns
dplyr::select(ID, spec, conc, value, parameter)
rETR_all <-  rETR %>%
# select only the last timepoint
filter(tp=="3") %>%
# ignore NAs
na.omit() %>%
#rename column enrty
rename(value = rETRmax) %>%
# use mean
mutate(parameter = "rETRmax")   %>%
#keep only relevant columns
dplyr::select(ID, spec, conc, value, parameter)
alpha_all <-  rETR %>%
# select only the last timepoint
filter(tp=="3") %>%
# ignore NAs
na.omit() %>%
#rename column enrty
rename(value = alpha) %>%
# use mean
mutate(parameter = "alpha")   %>%
#keep only relevant columns
dplyr::select(ID, spec, conc, value, parameter)
Ek_all <-  rETR %>%
# select only the last timepoint
filter(tp=="3") %>%
# ignore NAs
na.omit() %>%
#rename column enrty
rename(value = Ek) %>%
# use mean
mutate(parameter = "Ek")   %>%
#keep only relevant columns
dplyr::select(ID, spec, conc, value, parameter)
polypactivity_all <-  Polyps %>%
# select only the last timepoint
filter(tp!="0") %>%
# separate by species and concentration
group_by(ID, spec, conc) %>%
# ignore NAs
na.omit() %>%
# use mean
summarise(value = mean(ranks))%>%
mutate(parameter = "polypactivity",
conc = as.numeric(conc))
# bring all tables together
all_data <- rbind(surface_all, volume_all, calcification_all,
YII_all, FvFm_all,
rETR_all, alpha_all, Ek_all, polypactivity_all)
all_data$parameter <- factor(all_data$parameter,
levels = c("surface", "volume","calcification","polypactivity",
"YII", "FvFm", "rETRmax", "Ek",  "alpha"))
ggplot(all_data, aes(conc, value)) +
facet_grid(parameter~spec, scales="free")+
geom_point()+
stat_poly_line(color = "black")+
scale_x_continuous(trans='log') +
scale_y_continuous(trans='log')+
stat_correlation(use_label(c("R", "P")))+
#xlab (expression(paste("Reactions to ", italic("Artemia"), " cysts")))+
#ylab ("Reactions to microplastic")+
#labs(col="Species category", size="Polyp diameter")+
theme_bw()+
theme(legend.position= "none", #c(0.1, 0.9),
legend.direction = "horizontal",
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black"))
# safe graph
ggsave("out/correlations_log.png", plot = heatmap,
scale = 1, width = 19, height = 24, units = c("cm"),
dpi = 600, limitsize = TRUE)
# safe graph
ggsave("out/correlations_log.png", plot = last_plot(),
scale = 1, width = 19, height = 24, units = c("cm"),
dpi = 600, limitsize = TRUE)
ggplot(all_data, aes(conc, value)) +
facet_grid(parameter~spec, scales="free")+
geom_point()+
stat_poly_line(color = "black")+
#scale_x_continuous(trans='log') +
#scale_y_continuous(trans='log')+
stat_correlation(use_label(c("R", "P")))+
#xlab (expression(paste("Reactions to ", italic("Artemia"), " cysts")))+
#ylab ("Reactions to microplastic")+
#labs(col="Species category", size="Polyp diameter")+
theme_bw()+
theme(legend.position= "none", #c(0.1, 0.9),
legend.direction = "horizontal",
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black"))
# safe graph
ggsave("out/correlations.png", plot = last_plot(),
scale = 1, width = 19, height = 24, units = c("cm"),
dpi = 600, limitsize = TRUE)
ggplot(all_data, aes(conc, value)) +
facet_grid(parameter~spec, scales="free")+
geom_point()+
stat_poly_line(color = "black")+
#scale_x_continuous(trans='log') +
#scale_y_continuous(trans='log')+
stat_correlation(use_label(c("R", "P")))+
#xlab (expression(paste("Reactions to ", italic("Artemia"), " cysts")))+
#ylab ("Reactions to microplastic")+
#labs(col="Species category", size="Polyp diameter")+
theme_bw()+
theme(legend.position= "none", #c(0.1, 0.9),
legend.direction = "horizontal",
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black"))
ggplot(all_data, aes(conc, value)) +
facet_grid(parameter~spec, scales="free")+
geom_point()+
stat_poly_line(color = "black")+
#scale_x_continuous(trans='log') +
#scale_y_continuous(trans='log')+
stat_correlation(use_label(c("R", "P")))+
xlab (expression(paste("Reactions to ", italic("Artemia"), " cysts")))+
#ylab ("Reactions to microplastic")+
#labs(col="Species category", size="Polyp diameter")+
theme_bw()+
theme(legend.position= "none", #c(0.1, 0.9),
legend.direction = "horizontal",
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black"))
# safe graph
ggsave("out/correlations_log.png", plot = last_plot(),
scale = 1, width = 19, height = 24, units = c("cm"),
dpi = 600, limitsize = TRUE)
ggplot(all_data, aes(conc, value)) +
facet_grid(parameter~spec, scales="free")+
geom_point()+
stat_poly_line(color = "black")+
scale_x_continuous(trans='log') +
#scale_y_continuous(trans='log')+
stat_correlation(use_label(c("R", "P")))+
#xlab (expression(paste("Reactions to ", italic("Artemia"), " cysts")))+
#ylab ("Reactions to microplastic")+
#labs(col="Species category", size="Polyp diameter")+
theme_bw()+
theme(legend.position= "none", #c(0.1, 0.9),
legend.direction = "horizontal",
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black"))
# safe graph
ggsave("out/correlations_log.png", plot = last_plot(),
scale = 1, width = 19, height = 24, units = c("cm"),
dpi = 600, limitsize = TRUE)
# Generate random data with a linear relationship
set.seed(123)
x <- seq(1, 100, by = 1)
y <- 2 * x + rnorm(100, mean = 0, sd = 10)
# Plot the points
plot(x, y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
y <- seq(1, 100, by = 1)
# Plot the points
plot(x, y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
# Add a linear model
lm_model <- lm(y ~ x)
abline(lm_model, col = "red")
# Display the plot
legend("topleft", legend = paste("Y =", round(coef(lm_model)[2], 2), "*X +", round(coef(lm_model)[1], 2)),
col = "red", lty = 1, cex = 0.8)
y <- x^2
# Plot the points
plot(x, y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
# Add a linear model
lm_model <- lm(y ~ x)
abline(lm_model, col = "red")
# Plot the points
plot(log(x), log(y), main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
# Plot the points
plot(log(x), y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
x <- seq(1, 100, by = 1)
y <- seq(1, 100, by = 1)
# Plot the points
plot(log(x), y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
# Plot the points
plot(log(x), log(y), main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
x <- seq(1, 100, by = 1)
y <- seq(1, 100, by = 1)
# Plot the points
plot(log(x), log(y), main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
# Add a linear model
lm_model <- lm(y ~ x)
abline(lm_model, col = "red")
plot(x,y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
x <- seq(1, 100, by = 1)
y <- seq(1, 100, by = 1)
# Plot the points
plot(log(x), log(y), main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
plot(x, y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
x <- seq(1, 100, by = 1)
y <- x^2
# Plot the points
plot(log(x), log(y), main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
x <- seq(1, 100, by = 1)
y <- x^2
# Plot the points
plot(log(x), log(y), main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
plot(x, y, main = "Scatter Plot with Linear Model",
xlab = "X values", ylab = "Y values")
