unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat, -conc)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat, -conc)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
# add treatment info to table
Necrosis <- Necrosis %>%
mutate(tank = as.factor(tank),
treat = case_when(tank == 1 ~ "control",
tank == 6 ~ "control",
tank == 11 ~ "control",
tank == 2 ~ "0.1",
tank == 7 ~ "0.1",
tank == 12 ~ "0.1",
tank == 3 ~ "1",
tank == 8 ~ "1",
tank == 13 ~ "1",
tank == 4 ~ "10",
tank == 9 ~ "10",
tank == 14 ~ "10",
TRUE ~ "100"))
# create a new column (necro_per) for necrosis corrected for occurence
Necrosis <- Necrosis %>%
mutate(necro_per = necrosis,
# if no necrosis was observed enter '0'
necro_per = case_when(necro_occured == 'no' ~ "0"),
# format new column as numeric
necro_per = as.numeric(necro_per))
# replace NAs of positive necrotic occurence with the relative necrotic surface area from 'necrosis'
Necrosis$necro_per <- ifelse(is.na(Necrosis$necro_per),
Necrosis$necrosis, Necrosis$necro_per)
# check levels of certain columns to evaluate for releveling
# treatment
# use treatment as categories not numbers (if numbers necessary: use "conc" column)
Necrosis$treat <- factor(Necrosis$treat,
levels = c("control", "0.1", "1", "10", "100"))
levels(Necrosis$treat)
View(Necrosis)
View(Necrosis)
# create a subset with data of Pve
Spi_necrosis <- subset(Necrosis, spec == "Spi")
Spi_necrosis <- subset(Necrosis, tp == "3")
View(Necrosis)
hist(log((Spi_necrosis$necrosis)))
View(Spi_necrosis)
hist(((Spi_necrosis$necrosis)))
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(necrosis ~ conc + (1|col) , data = Spi_necrosis)
View(Spi_necrosis)
Spi_necrosis <- Spi_necrosis %>%
mutate(conc_con = treat,
# if no necrosis was observed enter '0'
conc_con = case_when(treat == 'control' ~ "0"),
# format new column as numeric
conc_con = as.numeric(conc_con))
hist(((Spi_necrosis$necrosis)))
str(Spi_necrosis)
library(tidyverse)
# to easily read in all data files
library(readxl)
# to conduct the exact fisher test function fisher_test
library(rstatix)
library(dplyr)
# ----- 3. Read in needed data files -----
# Occurence of necrosis for each coral and each sampling timepoint
# table originally in wide format
# needs to be in long format to process with additional information
Necro_occurence <- read.csv2("in/necrosis.csv") %>%
# rename columns to get continuous timepoints for later analyses
rename("0" = "necro_t0") %>%
rename("1" = "necro_t1") %>%
rename("2" = "necro_t2") %>%
rename("3" = "necro_t3") %>%
# bring table into long format
pivot_longer(cols = c('0', '1', '2', '3'), # use previous colums as new entries - categories
names_to = 'tp',  # assign new name for the column of tp
values_to = 'necro_occured') # assign new name for the values previously in the column under the headers above
# Percent of difference between living tissue area and surface area
# to bring together with the observed occurrences
Necro_percent <- read_rds("processed/necrosis_percent.rds")
View(Necro_percent)
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
View(Necrosis)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp', 'con')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp', 'conc')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
View(Necrosis)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank, conc), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp', 'conc')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
View(Necrosis)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat, -conc)
# Percent of difference between living tissue area and surface area
# to bring together with the observed occurrences
Necro_percent <- read_rds("processed/necrosis_percent.rds")
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat, -conc)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp', 'conc')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp))
View(Necrosis)
# add treatment info to table
Necrosis <- Necrosis %>%
mutate(tank = as.factor(tank),
treat = case_when(tank == 1 ~ "control",
tank == 6 ~ "control",
tank == 11 ~ "control",
tank == 2 ~ "0.1",
tank == 7 ~ "0.1",
tank == 12 ~ "0.1",
tank == 3 ~ "1",
tank == 8 ~ "1",
tank == 13 ~ "1",
tank == 4 ~ "10",
tank == 9 ~ "10",
tank == 14 ~ "10",
TRUE ~ "100"))
# create a new column (necro_per) for necrosis corrected for occurence
Necrosis <- Necrosis %>%
mutate(necro_per = necrosis,
# if no necrosis was observed enter '0'
necro_per = case_when(necro_occured == 'no' ~ "0"),
# format new column as numeric
necro_per = as.numeric(necro_per))
# replace NAs of positive necrotic occurence with the relative necrotic surface area from 'necrosis'
Necrosis$necro_per <- ifelse(is.na(Necrosis$necro_per),
Necrosis$necrosis, Necrosis$necro_per)
# check levels of certain columns to evaluate for releveling
# treatment
# use treatment as categories not numbers (if numbers necessary: use "conc" column)
Necrosis$treat <- factor(Necrosis$treat,
levels = c("control", "0.1", "1", "10", "100"))
levels(Necrosis$treat)
# create a subset with data of Pve
Spi_necrosis <- subset(Necrosis, spec == "Spi")
Spi_necrosis <- subset(Necrosis, tp == "3")
str(Spi_necrosis)
hist(((Spi_necrosis$necrosis)))
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(necrosis ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Pve)
# summary of tested with the LMER differences
cftest(model_Spi)
str(Spi_necrosis)
# make concentration column numeric for further analyses
mutate(conc = as.numeric(conc))
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
# Percent of difference between living tissue area and surface area
# to bring together with the observed occurrences
Necro_percent <- read_rds("processed/necrosis_percent.rds")
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
# ----- 3. Read in needed data files -----
# Occurence of necrosis for each coral and each sampling timepoint
# table originally in wide format
# needs to be in long format to process with additional information
Necro_occurence <- read.csv2("in/necrosis.csv") %>%
# rename columns to get continuous timepoints for later analyses
rename("0" = "necro_t0") %>%
rename("1" = "necro_t1") %>%
rename("2" = "necro_t2") %>%
rename("3" = "necro_t3") %>%
# bring table into long format
pivot_longer(cols = c('0', '1', '2', '3'), # use previous colums as new entries - categories
names_to = 'tp',  # assign new name for the column of tp
values_to = 'necro_occured') # assign new name for the values previously in the column under the headers above
# Percent of difference between living tissue area and surface area
# to bring together with the observed occurrences
Necro_percent <- read_rds("processed/necrosis_percent.rds")
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat, -conc)
# ----- 3. Read in needed data files -----
# Occurence of necrosis for each coral and each sampling timepoint
# table originally in wide format
# needs to be in long format to process with additional information
Necro_occurence <- read.csv2("in/necrosis.csv") %>%
# rename columns to get continuous timepoints for later analyses
rename("0" = "necro_t0") %>%
rename("1" = "necro_t1") %>%
rename("2" = "necro_t2") %>%
rename("3" = "necro_t3") %>%
# bring table into long format
pivot_longer(cols = c('0', '1', '2', '3'), # use previous colums as new entries - categories
names_to = 'tp',  # assign new name for the column of tp
values_to = 'necro_occured') # assign new name for the values previously in the column under the headers above
# Percent of difference between living tissue area and surface area
# to bring together with the observed occurrences
Necro_percent <- read_rds("processed/necrosis_percent.rds")
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat, -conc)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp)) %>%
# make concentration column numeric for further analyses
mutate(conc = as.numeric(conc))
# add treatment info to table
Necrosis <- Necrosis %>%
mutate(tank = as.factor(tank),
treat = case_when(tank == 1 ~ "control",
tank == 6 ~ "control",
tank == 11 ~ "control",
tank == 2 ~ "0.1",
tank == 7 ~ "0.1",
tank == 12 ~ "0.1",
tank == 3 ~ "1",
tank == 8 ~ "1",
tank == 13 ~ "1",
tank == 4 ~ "10",
tank == 9 ~ "10",
tank == 14 ~ "10",
TRUE ~ "100"))
# create a new column (necro_per) for necrosis corrected for occurence
Necrosis <- Necrosis %>%
mutate(necro_per = necrosis,
# if no necrosis was observed enter '0'
necro_per = case_when(necro_occured == 'no' ~ "0"),
# format new column as numeric
necro_per = as.numeric(necro_per))
# replace NAs of positive necrotic occurence with the relative necrotic surface area from 'necrosis'
Necrosis$necro_per <- ifelse(is.na(Necrosis$necro_per),
Necrosis$necrosis, Necrosis$necro_per)
# check levels of certain columns to evaluate for releveling
# treatment
# use treatment as categories not numbers (if numbers necessary: use "conc" column)
Necrosis$treat <- factor(Necrosis$treat,
levels = c("control", "0.1", "1", "10", "100"))
levels(Necrosis$treat)
# create a subset with data of Pve
Spi_necrosis <- subset(Necrosis, spec == "Spi")
Spi_necrosis <- subset(Necrosis, tp == "3")
str(Spi_necrosis)
hist(((Spi_necrosis$necrosis)))
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(necrosis ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(log(necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(log(necrosis+1) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(log(necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
hist(((Spi_necrosis$necrosis)))
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(log(necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(sqrt(necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(sqrt(necrosis+1) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer((necrosis)^2 ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer((necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer((necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(log(necrosis) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# LMER shows a good fit, therefore GLMER is used
model_Spi <- lmer(log(necrosis+1) ~ conc + (1|col) , data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# inspect residuals
qqPlot(residuals(model_Pve))          # good fit
shapiro_test(residuals(model_Pve))    # p > 0.05 = Non-Normality
hist((log(Spi_necrosis$necrosis+1)))
# LMER shows a good fit, therefore GLMER is used
model_Spi <- glmer(log(necrosis+1) ~ conc + (1|col), family="poisson", data = Spi_necrosis)
library(tidyverse)
# to easily read in all data files
library(readxl)
# to conduct the exact fisher test function fisher_test
library(rstatix)
library(dplyr)
# ----- 3. Read in needed data files -----
# Occurence of necrosis for each coral and each sampling timepoint
# table originally in wide format
# needs to be in long format to process with additional information
Necro_occurence <- read.csv2("in/necrosis.csv") %>%
# rename columns to get continuous timepoints for later analyses
rename("0" = "necro_t0") %>%
rename("1" = "necro_t1") %>%
rename("2" = "necro_t2") %>%
rename("3" = "necro_t3") %>%
# bring table into long format
pivot_longer(cols = c('0', '1', '2', '3'), # use previous colums as new entries - categories
names_to = 'tp',  # assign new name for the column of tp
values_to = 'necro_occured') # assign new name for the values previously in the column under the headers above
# Percent of difference between living tissue area and surface area
# to bring together with the observed occurrences
Necro_percent <- read_rds("processed/necrosis_percent.rds")
# ---- 4. Prepare data for statistical analyzes ----
Necro_occurence <- Necro_occurence %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -origin, -tank, -tp, -treat)
Necro_percent <- Necro_percent %>%
# create a new column to get a clean merge
unite(ID_tp, c(ID, tp), sep="_", remove=FALSE) %>%
# leave out some columns to have a cleaner merge with the percent table
select(-ID, -spec, -col, -tank, -tp, -treat, -conc)
# merge into one table
Necrosis <-   merge(Necro_percent, Necro_occurence, by = 'ID_tp', all.x = TRUE) %>%
separate(ID_tp, c('spec', 'col', 'tank', 'tp')) %>%
# unite spec, col and tank to get ID
unite(ID, c(spec, col, tank), sep="_", remove=FALSE) %>%
# make timepoint column numeric for further analyses
mutate(tp = as.numeric(tp)) %>%
# make concentration column numeric for further analyses
mutate(conc = as.numeric(conc))
# add treatment info to table
Necrosis <- Necrosis %>%
mutate(tank = as.factor(tank),
treat = case_when(tank == 1 ~ "control",
tank == 6 ~ "control",
tank == 11 ~ "control",
tank == 2 ~ "0.1",
tank == 7 ~ "0.1",
tank == 12 ~ "0.1",
tank == 3 ~ "1",
tank == 8 ~ "1",
tank == 13 ~ "1",
tank == 4 ~ "10",
tank == 9 ~ "10",
tank == 14 ~ "10",
TRUE ~ "100"))
# create a new column (necro_per) for necrosis corrected for occurence
Necrosis <- Necrosis %>%
mutate(necro_per = necrosis,
# if no necrosis was observed enter '0'
necro_per = case_when(necro_occured == 'no' ~ "0"),
# format new column as numeric
necro_per = as.numeric(necro_per))
# replace NAs of positive necrotic occurence with the relative necrotic surface area from 'necrosis'
Necrosis$necro_per <- ifelse(is.na(Necrosis$necro_per),
Necrosis$necrosis, Necrosis$necro_per)
# check levels of certain columns to evaluate for releveling
# treatment
# use treatment as categories not numbers (if numbers necessary: use "conc" column)
Necrosis$treat <- factor(Necrosis$treat,
levels = c("control", "0.1", "1", "10", "100"))
levels(Necrosis$treat)
# create a subset with data of Pve
Spi_necrosis <- subset(Necrosis, spec == "Spi")
Spi_necrosis <- subset(Necrosis, tp == "3")
str(Spi_necrosis)
hist((log(Spi_necrosis$necrosis+1)))
# LMER shows a good fit, therefore GLMER is used
model_Spi <- glmer(log(necrosis+1) ~ conc + (1|col), family="poisson", data = Spi_necrosis)
library(lme4)
# LMER shows a good fit, therefore GLMER is used
model_Spi <- glmer(log(necrosis+1) ~ conc + (1|col), family="poisson", data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
# for statistical testing
library(multcomp)
library(lme4)
# LMER shows a good fit, therefore GLMER is used
model_Spi <- glmer(log(necrosis+1) ~ conc + (1|col), family="poisson", data = Spi_necrosis)
# summary of tested with the LMER differences
cftest(model_Spi)
